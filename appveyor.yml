version: "{build}-ci"

environment:
  VersionMajor: 0
  VersionMinor: 1
  VersionPatch: 0
  CoverityProjectToken:
    secure: aTAXxox4oroYvz56HikRyoY7/ZjP3pleh97XB4Q7skc=
  CoverityNotificationEmail:
    secure: 1EgaryX47nSc2j58xUqdbq0enWGMKG4KHa+FUdPXfVE=
    
init:
- ps: |
    $env:BuildDir = "$env:APPVEYOR_BUILD_FOLDER\.OUTPUT"
    $env:VersionBuild = "$env:APPVEYOR_BUILD_NUMBER"
    $env:VersionStage = "$env:APPVEYOR_REPO_BRANCH"
    $env:VersionTag = "$env:APPVEYOR_REPO_COMMIT"
  
matrix:
  # Fail whole build on first error.
  fast_finish: true
 
services:
- mssql2012sp1

# Build configuration. --------------------------------------------------------


configuration:
- Release

platform: Any CPU

build_script:
- ps: |
    nuget restore
    
    $buildCmd = "C:\Program Files (x86)\MSBuild\12.0\bin\msbuild.exe"
    $buildArgs = @(
      "/m",
      "/l:C:\Program Files\AppVeyor\BuildAgent\Appveyor.MSBuildLogger.dll",
      "/p:Configuration=$env:CONFIGURATION")
    
    # If build is not a scheduled one, than simply build project with MSBuild.
    #if ($env:APPVEYOR_SCHEDULED_BUILD -ne "True") {
    #  & $buildCmd $buildArgs
    #  return
    #}
    
    # Else, build project with Coverity Scan.
    "Building project with Coverity..."
    & "C:\Tools\Coverity\bin\cov-build.exe" --dir $env:APPVEYOR_BUILD_FOLDER\cov-int --encoding=UTF-8 $buildCmd $buildArgs;
      
    & nuget install PublishCoverity -Version 0.9.0 -ExcludeVersion -OutputDirectory .\packages

    & .\packages\PublishCoverity\PublishCoverity.exe compress `
        -i "$Env:APPVEYOR_BUILD_FOLDER\cov-int" `
        -o "$Env:APPVEYOR_BUILD_FOLDER\$Env:APPVEYOR_PROJECT_NAME.zip"

    Write-Host $Env:APPVEYOR_REPO_NAME

    & .\packages\PublishCoverity\PublishCoverity.exe publish `
    -t "$Env:CoverityProjectToken" `
    -e "$Env:CoverityNotificationEmail" `
    -r "$Env:APPVEYOR_REPO_NAME" `
    -z "$Env:APPVEYOR_BUILD_FOLDER\$env:APPVEYOR_PROJECT_NAME.zip" `
    -d "CI server scheduled build." `
    --codeVersion "$Env:VersionMajor.$Env:VersionMinor.$Env:VersionPatch" `
    --nologo
    
# Tests configuration. --------------------------------------------------------
  
test_script:
- ps: |
    $startPath = "$($env:appveyor_build_folder)\bin\Release"
    $sqlInstance = "(local)\SQL2012SP1"
    $dbName = "Pvm"

    # replace the db connection with the local instance
    $config = join-path $startPath "PVM.Persistence.Sql.Test.dll.config"
    $doc = (gc $config) -as [xml]
    $doc.SelectSingleNode('//connectionStrings/add[@name="PvmContext"]').connectionString = "Server=$sqlInstance; Database=$dbName; Trusted_connection=true"
    $doc.Save($config)

    sqlcmd -S "$sqlInstance" -Q "Use [master]; CREATE DATABASE [$dbName]"

    # Discover tests.
    $tests =
      (Get-ChildItem -Path $startPath -Recurse -Filter *.Test.dll).FullName
    
    # Run tests.
    nunit-console $tests

# Artifacts configuration. ----------------------------------------------------

#artifacts:
#  - path: out\*.nupkg

# Deployment configuration. ---------------------------------------------------

deploy:
  provider: GitHub
  auth_token:
    secure: wA206g1o3a+l3RP0oweRIAWzSxtI81fVHdtiWpRWZWaK6/UOMvgqNIOLKo3/bZuk # your encrypted token from GitHub
  artifact: /.*\.nupkg/            # upload all NuGet packages to release assets
  draft: false
  prerelease: false
  on:
    branch: master                 # release from master branch only
    appveyor_repo_tag: true        # deploy on tag push only

# Other configuration. --------------------------------------------------------

# Use GitHub API for fast repository fetching.
shallow_clone: true